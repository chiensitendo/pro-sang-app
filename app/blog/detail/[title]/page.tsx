
"use client";

import BlogLayout from "@/components/blog/blog-layout";
import styles from "./index.module.scss";
import BlogDetail from "@/components/blog/blog-detail";
import withNotification from "@/components/with-notification";
import { useSessionAuth } from "@/components/use-session-auth";
const content = `<h2 style="margin-left:0px;"><strong>My experience adding a MongoDB No-SQL database to my Kubernetes cluster</strong></h2><h2 style="margin-left:0px;">If you have read my article on <a href="https://medium.com/@martin.hodges/how-i-choose-between-sql-and-no-sql-solutions-63463b6e65b9">how to decide between SQL and No-SQL databases</a>, you may be wondering if you can add a No-SQL MongoDB database to your Kubernetes cluster. In this article I explain what I did to do just that and how I then used it with a Spring Boot application.</h2><figure class="image"><img style="aspect-ratio:44/44;" src="https://miro.medium.com/v2/resize:fill:44:44/1*dmbNkD5D-u45r44go_cf0g.png" alt="Martin Hodges" width="44" height="44"></figure><p style="margin-left:0px;"><a href="https://medium.com/@martin.hodges?source=post_page-----f43fe72fa0ba--------------------------------"><span style="color:rgb(36,36,36);">Martin Hodges</span></a></p><p style="margin-left:12px;"><span style="color:rgb(107,107,107);">·</span></p><p style="margin-left:0px;"><span style="color:rgb(36,36,36);">Follow</span></p><p style="margin-left:12px;"><span style="color:rgb(107,107,107);">15 min read</span></p><p style="margin-left:12px;"><span style="color:rgb(107,107,107);">·</span></p><p style="margin-left:12px;"><span style="color:rgb(107,107,107);">Jun 11, 2024</span></p><p style="margin-left:0px;">&nbsp;</p><p style="margin-left:0px;">56</p><p style="margin-left:0px;">&nbsp;</p><p style="margin-left:0px;">&nbsp;</p><p style="margin-left:0px;">&nbsp;</p><p style="margin-left:0px;">&nbsp;</p><p style="margin-left:0px;">&nbsp;</p><p style="margin-left:auto;"><img class="image_resized" style="aspect-ratio:700/347;height:auto;width:680px;" src="https://miro.medium.com/v2/resize:fit:700/1*Cs1PJ4-Oq5YC_alTezzZwA.png" alt="" width="700" height="347"></p><p>Adding MongoDB to a Spring Boot application</p><h2 style="margin-left:0px;"><strong>Starting out</strong></h2><p style="margin-left:0px;">As usual, when developing a Kubernetes service, I start with a local Kind Kubernetes cluster for development. I have written on <a href="https://medium.com/@martin.hodges/using-kind-to-develop-and-test-your-kubernetes-deployments-54093692c9fa">how to set up a Kind</a> before and <a href="https://github.com/MartinHodges/aquarium-with-mongo-db">the GitHub repository that is associated to this article</a> has the configuration files in it to do just that.</p><p style="margin-left:0px;">You can clone the repository with:</p><p>git <span style="color:rgb(92,38,153);">clone</span> git@github.com:MartinHodges/aquarium-with-mongo-db.git</p><h2 style="margin-left:0px;"><strong>Why MongoDB?</strong></h2><p style="margin-left:0px;">My earlier article addresses the decision on SQL vs No-SQL. If you are reading this, I assume that you decided to go with No-SQL.</p><p style="margin-left:0px;">Once that is decided, it is now a question of which No-SQL database to go with. MongoDB has twice the market share compared to its nearest competitors. It is highly sophisticated and has, both a community edition and an enterprise edition. It is typically the go-to No-SQL database.</p><p style="margin-left:0px;">The technical comparison with other databases is beyond this article and MongoDB was selected for this article based on its popularity — and the fact that it can do the job!</p><h2 style="margin-left:0px;"><strong>Installing MongoDB</strong></h2><p style="margin-left:0px;">Installing MongoDB onto our Kubernetes cluster is done in a similar way to other applications, through the use of an operator.</p><p style="margin-left:auto;"><img class="image_resized" style="aspect-ratio:700/347;height:auto;width:680px;" src="https://miro.medium.com/v2/resize:fit:700/1*zYPNh4bzIFeS_mfM9j4WEg.png" alt="" width="700" height="347"></p><p>MongoDB Kubernetes operator</p><p style="margin-left:0px;">A Kubernetes operator manages an application on behalf of you. It is able to install and manage the lifecycle of the application whilst also monitoring it and taking action as necessary.</p><p style="margin-left:0px;">In the case of a database, it could be creating a database cluster, scaling it, doing backups etc. Typically, an operator relies on installing Custom Resource Definitions (CRDs) that provide it with its own ‘Kubernetes configuration language’. It listens out for requests to add these custom resources to the cluster and then acts on your behalf.</p><h2 style="margin-left:0px;"><strong>Creating a development Kubernetes cluster</strong></h2><p style="margin-left:0px;">Assuming you have installed Kind, you can now create a Kind cluster using the following configuration:</p><p style="margin-left:0px;"><code><strong>kind/kind-config.yml</strong></code></p><p><span style="color:rgb(131,108,40);">apiVersion:</span> <span style="color:rgb(196,26,22);">kind.x-k8s.io/v1alpha4</span><br><span style="color:rgb(131,108,40);">kind:</span> <span style="color:rgb(196,26,22);">Cluster</span><br><span style="color:rgb(131,108,40);">nodes:</span><br><span style="color:rgb(28,0,207);">-</span> <span style="color:rgb(131,108,40);">role:</span> <span style="color:rgb(196,26,22);">control-plane</span><br>&nbsp; <span style="color:rgb(131,108,40);">extraPortMappings:</span><br>&nbsp; <span style="color:rgb(0,116,0);"># apis</span><br>&nbsp; <span style="color:rgb(28,0,207);">-</span> <span style="color:rgb(131,108,40);">containerPort:</span> <span style="color:rgb(28,0,207);">30080</span><br>&nbsp; &nbsp;&nbsp;<span style="color:rgb(131,108,40);">hostPort:</span> <span style="color:rgb(28,0,207);">30080</span><br><span style="color:rgb(28,0,207);">-</span> <span style="color:rgb(131,108,40);">role:</span> <span style="color:rgb(196,26,22);">worker</span><br><span style="color:rgb(28,0,207);">-</span> <span style="color:rgb(131,108,40);">role:</span> <span style="color:rgb(196,26,22);">worker</span><br><span style="color:rgb(28,0,207);">-</span> <span style="color:rgb(131,108,40);">role:</span> <span style="color:rgb(196,26,22);">worker</span><br><br>&nbsp;</p><p style="margin-left:0px;">This creates a 4 node cluster (1 controller, 3 workers). It also makes port 30080 available on the development machine. You can use this to create your local Kubernetes cluster this with:</p><p>kind create cluster --config kind/kind-config.yml</p><h2 style="margin-left:0px;"><strong>Installing the operator</strong></h2><p style="margin-left:0px;">You can install a community supported operator using Helm.</p><p style="margin-left:0px;">First add the Helm link to your local repository with:</p><p>helm repo add mongodb https://mongodb.github.io/helm-charts</p><p style="margin-left:0px;">You can see what charts this has added with:</p><p>helm search repo mongo</p><p style="margin-left:0px;">In the list, you will see the community operator, which we will use.</p><p style="margin-left:0px;">We will place our operator and our database in their own separate namespace called <code>mongo</code>. Let’s create it with:</p><p>kubectl create namespace mongo</p><p style="margin-left:0px;">You can now install the operator with:</p><p>&nbsp;helm install community-operator mongodb/community-operator -n mongo</p><blockquote><p style="margin-left:0px;"><i>If you want the operator to watch for resources being created in a different namespace add </i><code><i>--set operator.watchNamespace="&lt;other namespace&gt;"</i></code><i> to the command above.</i></p></blockquote><p style="margin-left:0px;">You can check the ready status is <code>1/1 Running</code> with:</p><p>kubectl get pods -n mongo</p><p style="margin-left:0px;">Now we have an operator up and running, we can see the CRDs it installed with:</p><p>kubectl get crds<br>kubectl describe crd mongodbcommunity.mongodbcommunity.mongodb.com&nbsp;</p><p style="margin-left:0px;">We are now ready to create our first MongoDB cluster.</p><h2 style="margin-left:0px;"><strong>Creating a cluster</strong></h2><p style="margin-left:0px;">With the operator installed, it is now listening out for any request to create a MongoDB database. We can make a request by applying a MonogDB manifest to our Kubernetes cluster using the CRDs that were loaded by the operator.</p><p style="margin-left:0px;">Before we do this, we will need to set up a password for our database user as a Kubernetes secret.</p><p style="margin-left:0px;">Create the secret as follows (remember to replace &lt;…&gt; with your chosen password):</p><p>kubectl create secret generic my-user-password -n mongo --from-literal=<span style="color:rgb(196,26,22);">"password=&lt;your password&gt;"</span>&nbsp;</p>`

const BlogDetailPage = () => {
    const tags = ["blue", "green", "technology"];
    const title = "My experience adding a MongoDB No-SQL database to my Kubernetes cluster";
    const { userInfo, avatar, getFullName } = useSessionAuth();
    return <BlogLayout>
        <BlogDetail tags={tags} title={title} content={content} avatar={avatar} fullName={getFullName()}/>
    </BlogLayout>
}

export default withNotification(BlogDetailPage);